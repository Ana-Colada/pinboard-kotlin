apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.5"
}

def daggerGenerated = [
    '**/**_Provide**Factory**.class',
    '**/**Module_**Factory**.class',
    '**/**Module_**Proxy**.class',
    '**/**_Provide**Factory.class',
    '**/**Dagger**.class',
    '**/**_MembersInjector.class'
]

def fileFilter = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    'android/**/*.*'
]

def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: (fileFilter + daggerGenerated))
def debugKotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: (fileFilter + daggerGenerated))
def libKotlinTree = fileTree(dir: "$project.buildDir/classes/kotlin/main", excludes: (fileFilter + daggerGenerated))

def mainSrc = "${project.projectDir}/src/main/java"
def mainKotlinSrc = "${project.projectDir}/src/main/kotlin"

task codeCoverageReport(type: JacocoReport) {

    reports {
        xml.enabled = true
        xml.setDestination(file("${project.buildDir}/reports/jacoco/report.xml"))
        html.enabled = true
    }

    getSourceDirectories().setFrom(files([mainSrc, mainKotlinSrc]))
    getClassDirectories().setFrom(files([debugTree, debugKotlinTree, libKotlinTree]))
    getExecutionData().setFrom(fileTree(dir: "$project.buildDir", includes: [
        "jacoco/test.exec",
        "jacoco/testDebugUnitTest.exec",
        "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

tasks.withType(Test) {
    it.finalizedBy(["codeCoverageReport"])
}

