plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-android-extensions")
    id("kotlin-kapt")
}

if (jacocoEnabled.toBoolean()) {
    println("Applying coverage-report.gradle")
    apply {
        from("coverage-report.gradle")
    }
}

android {
    buildFeatures {
        viewBinding = true
    }

    compileSdkVersion(Versions.compileSdkVersion)

    defaultConfig {
        applicationId = AppInfo.applicationId
        versionCode = AppInfo.versionCode
        versionName = AppInfo.versionName
        minSdkVersion(Versions.minSdkVersion)
        targetSdkVersion(Versions.targetSdkVersion)

        resConfigs("en")

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                    "room.schemaLocation":"$projectDir/schemas".toString(),
                    "room.incremental":"true"
                ]
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file("../keystore/debug.keystore")
            keyAlias "androiddebugkey"
            keyPassword "android"
            storePassword "android"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            minifyEnabled false
            testCoverageEnabled = jacocoEnabled.toBoolean()
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    flavorDimensions("api")
    productFlavors {
        pinboardapi {
            dimension("api")

            ext {
                appNameSuffix = [debug: " Dev", release: ""]
            }
        }
        noapi {
            dimension("api")
            applicationIdSuffix(".noapi")

            ext {
                appNameSuffix = [debug: " NoApi Dev", release: " NoApi"]
            }
        }

        applicationVariants.all { variant ->
            def flavor = variant.productFlavors[0]
            variant.resValue("string", "app_name", "${AppInfo.appName}${flavor.ext.appNameSuffix[variant.buildType.name]}")
        }
    }

    sourceSets {
        main.java.srcDirs("src/main/kotlin")
        pinboardapi.java.srcDir("src/pinboardapi/kotlin")
        noapi.java.srcDir("src/noapi/kotlin")

        test.java.srcDirs("src/test/kotlin", "src/sharedTest/kotlin")
        testPinboardapi.java.srcDirs("src/test/kotlin", "src/sharedTest/kotlin", "src/testPinboardapi/kotlin")

        androidTest {
            java.srcDirs("src/androidTest/kotlin", "src/sharedTest/kotlin")
            assets.srcDirs += files("$projectDir/schemas")
        }
    }

    compileOptions {
        sourceCompatibility(JavaVersion.VERSION_1_8)
        targetCompatibility(JavaVersion.VERSION_1_8)
    }

    packagingOptions {
        exclude("META-INF/LICENSE.md")
        exclude("META-INF/LICENSE-notice.md")
    }

    testOptions {
        animationsDisabled true

        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true

            all {
                useJUnitPlatform()
            }
        }
    }
}

dependencies {
    implementation(Dependencies.coreLib)
    implementation(Dependencies.coreLibArch)

    // Kotlin
    implementation(Dependencies.kotlin)
    implementation(Dependencies.coroutinesCore)
    implementation(Dependencies.coroutinesAndroid)

    // Android
    implementation(Dependencies.supportLibrary)
    implementation(Dependencies.androidCore)
    implementation(Dependencies.activity)
    implementation(Dependencies.fragments)
    implementation(Dependencies.materialDesign)
    implementation(Dependencies.constraintLayout)
    implementation(Dependencies.swipeRefreshLayout)

    implementation(Dependencies.lifecycleJava8)

    implementation(Dependencies.archComponents)
    kapt(Dependencies.archComponentsCompiler)

    implementation(Dependencies.room)
    kapt(Dependencies.roomCompiler)

    implementation(Dependencies.customTabs)

    // Misc
    implementation(Dependencies.dagger)
    kapt(Dependencies.daggerCompiler)

    implementation(Dependencies.gson)

    implementation(Dependencies.okhttp)
    implementation(Dependencies.retrofit)
    implementation(Dependencies.retrofitGsonConverter)
    implementation(Dependencies.httpLoggingInterceptor)

    implementation(Dependencies.jsoup)

    implementation(Dependencies.playCore)

    debugImplementation(Dependencies.leakCanary)

    // Test
    testCompileOnly(TestDependencies.junit)
    testRuntimeOnly(TestDependencies.junit5Engine)
    testRuntimeOnly(TestDependencies.junitVintage)
    testImplementation(TestDependencies.junit5)
    testImplementation(TestDependencies.junit5Params)

    testImplementation(TestDependencies.coreLibTest)
    testImplementation(TestDependencies.coreLibArchTest)

    testImplementation(Dependencies.kotlinReflect)

    testImplementation(TestDependencies.googleTruth)
    testImplementation(TestDependencies.mockk)
    testImplementation(TestDependencies.coroutinesTest)
    testImplementation(TestDependencies.archComponentsTest)

    androidTestImplementation(TestDependencies.googleTruth)
    androidTestImplementation(Dependencies.supportAnnotations)
    androidTestImplementation(TestDependencies.testRunner)
    androidTestImplementation(TestDependencies.coreLibTest)
    androidTestImplementation(TestDependencies.kotlinTest)
    androidTestImplementation(TestDependencies.archComponentsTest)
    androidTestImplementation(TestDependencies.roomTest)
}
